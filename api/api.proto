syntax = "proto3";
package api;

/**
 * Unique idenitifer for a Task
 */
message TaskID {
    /**
     * UUID of the task. Required.
     */
    string uuid = 1;
}

/**
 * Unique identifier of a Node
 */
message NodeID {
    /**
     * UUID of the node. Required.
     */
    string uuid = 1;

    /**
     * IP the node can be reached at. Required.
     */
    string ip = 2;

    /**
     * Port the node can be reached at. Required.
     */
    int32 port = 3;
}

/**
 * Status of a Task
 */
message TaskStatus {
    /**
     * Task has been received, but has not started yet.
     */
    message Queued {}

    /**
     * Task is executing on a node.
     */
    message Running {
        /**
         * Node the task is running on.
         */
        NodeID node_id = 1;
    }

    /**
     * Task has finished executing (successfully or not).
     */
    message Complete {
        /**
         * Node the task was completed on.
         */
        NodeID node_id = 1;

        /**
         * Task exit code.
         */
        sint32 exit_code = 2;

        /**
         * Epoch at which this task was completed.
         */
        int64 epoch = 3;
    }

    /**
     * Task has been cancelled.
     */
    message Canceled {
        /**
         * Epoch at which this task was canceled.
         */
        int64 epoch = 1;
    }

    /**
     * Task failed due to an error.
     */
    message Failed {
        /**
         * Message describing the error.
         */
        string error = 1;
    }

    /**
     * Acutal status. Required.
     */
    oneof Status {
        Queued queued = 1;
        Running running = 2;
        Complete complete = 3;
        Canceled canceled = 4;
        Failed failed = 5;
    }
}

/**
 * Request to create a Task.
 */ 
message TaskRequest {
    /**
     * Command to run. Required.
     */
    string command = 1;

    /**
     * Arguments to pass to command.
     */
    repeated string args = 2;

    // TODO - Ressource limits / requirements
}

// TODO - We should probably use google.protobuf.Empty
message Empty {
}

// TODO - Is this a sane way to split logs up?
message Log {
    repeated string line = 1;
}

// TODO - Should we have specific Request / Reponse messages so we can
// change the API without breaking backwards compatibility?
service TaskService {
    /**
     * Submit and queue a Task from a TaskRequest.
     * Returns the ID assigned to the task.
     */
    rpc Submit(TaskRequest) returns (TaskID);

    /**
     * Get the status of a submitted task.
     */
    rpc Status(TaskID) returns (TaskStatus);

    /**
     * Cancel a submitted task.
     */
    rpc Cancel(TaskID) returns (Empty);

    /**
     * Retrieve the logs for a task.
     * Will stream new logs as long as the task is running.
     */
    rpc Logs(TaskID) returns (stream Log);
}
